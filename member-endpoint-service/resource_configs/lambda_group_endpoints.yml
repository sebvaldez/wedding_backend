# ServerlessFramework Syntax

CreateGroup:
  description: Create a new group
  handler: functions/createGroup.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: CreateGroupRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/groups
        method: post
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

FetchGroup:
  description: Show a group by ID
  handler: functions/fetchGroup.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: FetchGroupRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/groups/{groupId}
        method: get
        request:
          parameters:
            paths:
              groupId: true
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

FetchGroups:
  description: Create a new group
  handler: functions/fetchGroups.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: FetchGroupRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/groups
        method: get
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

FetchGroupMembers:
  description: Fetch Members in a given Group ID
  handler: functions/fetchGroupMembers.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: FetchGroupMembersRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/group/{groupId}/members
        method: get
        request:
          parameters:
            paths:
              groupId: true
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}