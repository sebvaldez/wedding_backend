# ServerlessFramework Syntax

# Authorizer Lambda
# ....

emailMessage:
  description: >-
    Uses AWS SES to send out a email to the member.
    Email body should be a MJML template.
  handler: functions/emailMessage.call
  layers:
    - !Ref CommonLambdaLayer
    - !Ref CoreServicesLambdaLayer
    - !Ref SendGridLambdaLayer
  role: emailMessageRole
  environment:
    SENDGRID_SENDER_EMAIL: "rsvp@allegrasebwedding.com"
    SENDGRID_API_KEY: ${ssm(${self:provider.region}):sendgrid-api-key}
  events:
    - http:
        path: /sendInvitation/{memberId}
        method: post
        request:
          parameters:
            paths:
              memberId: true
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

textMessage:
  description: >-
    Uses nodeModuleLayer for Twillio API
    Parses input and send text message
  timeout: 10
  handler: functions/textMessage.call
  layers:
    - !Ref CoreServicesLambdaLayer
    - !Ref TwilioLambdaLayer
  role: textMessageRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
    TWILLIO_ACCOUNT_NUMBER: ${ssm(${self:provider.region}):twillio-account-number}
    TWILLIO_ACCOUNT_SID: ${ssm(${self:provider.region}):twillio-account-sid}
    TWILLIO_AUTH_TOKEN: ${ssm(${self:provider.region}):twillio-auth-token}
  events:
    - http:
        path: /text/{memberId}
        method: post
        request:
          parameters:
            paths:
              memberId: true
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}
