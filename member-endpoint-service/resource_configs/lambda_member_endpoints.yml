# ServerlessFramework Syntax

CreateMember:
  description: >-
    Create a memeber
  handler: functions/createMember.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: CreateMemberRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/members
        method: post
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

CreateBulkMembers:
  description: >-
    Create memebers in bulk
  handler: functions/createBulkMembers.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: CreateBulkMembersRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/members/bulk
        method: post
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

DeleteMember:
  description: >-
    Delete a member by Member ID
  handler: functions/deleteMember.call
  role: DeleteMemberRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  layers:
    - !Ref CoreServicesLambdaLayer
  events:
    - http:
        path: /wedding/members/{memberId}
        method: delete
        request:
          parameters:
            paths:
              memberId: true
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

FetchMember:
  description: >-
    Fetch member by ID || Email
  handler: functions/fetchMember.call
  role: FetchMemberRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
    MEMBER_TABLE_GSI_1: ${self:provider.environment.MEMBER_TABLE_GSI_1}
  layers:
    - !Ref CoreServicesLambdaLayer
  events:
    - http:
        path: /wedding/members
        method: get
        request:
          parameters:
            querystrings:
              id: false
              email: false
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

UpdateMember:
  description: >-
    Update member
  handler: functions/updateMember.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: UpdateMemberRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/members/{memberId}
        method: patch
        cors: true
        request:
          parameters:
            paths:
              memberId: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}

UpdateBulkMembers:
  description: >-
    Update members in bulk
  handler: functions/updateBulkMembers.call
  layers:
    - !Ref CoreServicesLambdaLayer
  role: UpdateBulkMembersRole
  environment:
    MEMBER_TABLE: ${self:provider.environment.MEMBER_TABLE}
  events:
    - http:
        path: /wedding/members/bulk
        method: patch
        cors: true
        authorizer:
          type: TOKEN
          authorizerId: ${self:custom.authorizer}
